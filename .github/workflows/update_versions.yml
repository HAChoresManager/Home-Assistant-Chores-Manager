name: Update Version Numbers

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  update-versions:
    # Only run if the PR was merged AND it's not a version update PR
    if: |
      github.event.pull_request.merged == true && 
      !startsWith(github.event.pull_request.title, 'Update version numbers')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Create new branch for version update
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create a new branch for version updates
          VERSION_BRANCH="version-update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $VERSION_BRANCH
          echo "VERSION_BRANCH=$VERSION_BRANCH" >> $GITHUB_ENV
      
      - name: Update version numbers
        run: |
          # Create the Python script for version updating
          cat > update_versions.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import re
          import datetime
          import subprocess
          from pathlib import Path

          # Get current date in YYYYMMDD format
          today = datetime.datetime.now().strftime('%Y%m%d')

          # Get short commit hash 
          short_hash = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).decode('utf-8').strip()

          # Version string to use (date + commit hash)
          version_string = f"{today}-{short_hash}"
          print(f"Using version string: {version_string}")

          # Files to update and their patterns
          FILES_TO_UPDATE = [
              {
                  'path': 'custom_components/chores_manager/www/chores-dashboard/index.html',
                  'patterns': [
                      # Use full version string for all cache busting parameters
                      (r'(href="[^"]+\?v=)[^"]+(")', f'\\1{version_string}\\2'),
                      (r'(src="[^"]+\?v=)[^"]+(")', f'\\1{version_string}\\2'),
                      (r'CHORES_APP_VERSION = "([^"]+)-[^"]+"', f'CHORES_APP_VERSION = "\\1-{version_string}"')
                  ]
              },
              {
                  'path': 'custom_components/chores_manager/panel.py',
                  'patterns': [
                      # Use full version string here too
                      (r'(js_url="/local/chores-dashboard/chores-dashboard.js\?v=)[^"]+(")', f'\\1{version_string}\\2')
                  ]
              }
          ]

          def update_file(file_path, patterns):
              path = Path(file_path)
              if not path.exists():
                  print(f"File not found: {file_path}")
                  return False
                  
              content = path.read_text()
              original_content = content
              
              for pattern, replacement in patterns:
                  content = re.sub(pattern, replacement, content)
              
              if content != original_content:
                  path.write_text(content)
                  print(f"Updated: {file_path}")
                  return True
              
              print(f"No changes needed: {file_path}")
              return False

          def main():
              updated = False
              
              for file_info in FILES_TO_UPDATE:
                  file_updated = update_file(file_info['path'], file_info['patterns'])
                  updated = updated or file_updated
              
              if updated:
                  print(f"Version numbers updated to {version_string}")
              else:
                  print("No version numbers needed updating")

          if __name__ == "__main__":
              main()
          EOF
          
          # Execute the script
          python update_versions.py

      - name: Commit changes and push branch
        id: commit
        run: |
          # Check if there are changes to commit
          if git diff --name-only | grep -q .; then
            echo "Making changes and pushing branch"
            git add .
            # Include [skip ci] tag to prevent additional workflow runs
            git commit -m "Update version numbers [skip ci]"
            git push --set-upstream origin $VERSION_BRANCH
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected"
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.commit.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update version numbers"
          body: |
            This PR updates version numbers in the application files for better cache busting.
            
            - Updates CSS and JS version parameters
            - Updates app version variable
            
            This PR was automatically created after a successful merge to ensure all version numbers are up to date.
            
            **Note**: This PR is excluded from triggering additional workflows to prevent infinite loops.
          branch: ${{ env.VERSION_BRANCH }}
          base: main
          delete-branch: true